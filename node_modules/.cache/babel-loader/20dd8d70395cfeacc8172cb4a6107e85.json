{"ast":null,"code":"var _jsxFileName = \"/home/fabian/Documents/d3Js/networks/network-react/chart-d3js-react/src/drawGrapho2.js\";\nimport React, { useEffect } from 'react';\nimport * as d3 from 'd3';\nconst width = 600; //Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n\nconst height = 500; //Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n\nconst DrawGrapho2 = props => {\n  useEffect(() => {\n    d3.select('.drawGrapho2 > *').remove();\n    draw(props);\n  }, [props]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"drawGrapho2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 10\n    }\n  });\n};\n\nconst draw = props => {\n  function getNodeColor(node) {\n    return node.group === 1 ? 'red' : 'gray';\n  }\n\n  var svg = d3.select(\".drawGrapho2\").append(\"svg\").attr(\"width\", width).attr(\"height\", height);\n  d3.json('https://jsonplaceholder.typicode.com/posts', {\n    method: \"POST\",\n    body: JSON.stringify({\n      title: 'Hello',\n      body: '_d3-fetch_ is it',\n      userId: 1,\n      friends: [2, 3, 4]\n    }),\n    headers: {\n      \"Content-type\": \"application/json; charset=UTF-8\"\n    }\n  }).then(json => {\n    svg.append(\"text\").text(JSON.stringify(json)).attr(\"y\", 200).attr(\"x\", 120).attr(\"font-size\", 16).attr(\"font-family\", \"monospace\");\n  });\n  var graph = d3.json(\"./miserables.json\", function (error, graph) {\n    if (error) throw error;\n    var nodeElements = svg.append(\"g\").attr(\"class\", \"nodes\").selectAll(\"circle\").data(graph.nodes).enter().append(\"circle\").attr(\"r\", 10).attr(\"fill\", getNodeColor);\n    console.log(graph.nodes);\n  });\n  console.log(graph.nodes);\n};\n\nexport default DrawGrapho2;","map":{"version":3,"sources":["/home/fabian/Documents/d3Js/networks/network-react/chart-d3js-react/src/drawGrapho2.js"],"names":["React","useEffect","d3","width","height","DrawGrapho2","props","select","remove","draw","getNodeColor","node","group","svg","append","attr","json","method","body","JSON","stringify","title","userId","friends","headers","then","text","graph","error","nodeElements","selectAll","data","nodes","enter","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AAEA,MAAMC,KAAK,GAAG,GAAd,C,CAAkB;;AAClB,MAAMC,MAAM,GAAG,GAAf,C,CAAmB;;AAEnB,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAC7BL,EAAAA,SAAS,CAAC,MAAM;AACfC,IAAAA,EAAE,CAACK,MAAH,CAAU,kBAAV,EAA8BC,MAA9B;AACAC,IAAAA,IAAI,CAACH,KAAD,CAAJ;AACD,GAHS,EAGR,CAACA,KAAD,CAHQ,CAAT;AAIA,sBAAO;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CAND;;AASA,MAAMG,IAAI,GAAIH,KAAD,IAAW;AAEtB,WAASI,YAAT,CAAsBC,IAAtB,EAA4B;AAC1B,WAAOA,IAAI,CAACC,KAAL,KAAe,CAAf,GAAmB,KAAnB,GAA2B,MAAlC;AACD;;AAED,MAAIC,GAAG,GAAGX,EAAE,CAACK,MAAH,CAAU,cAAV,EAA0BO,MAA1B,CAAiC,KAAjC,EACTC,IADS,CACJ,OADI,EACKZ,KADL,EAETY,IAFS,CAEJ,QAFI,EAEMX,MAFN,CAAV;AAIAF,EAAAA,EAAE,CAACc,IAAH,CAAQ,4CAAR,EAAsD;AACpDC,IAAAA,MAAM,EAAC,MAD6C;AAEpDC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,MAAAA,KAAK,EAAE,OADY;AAEnBH,MAAAA,IAAI,EAAE,kBAFa;AAGnBI,MAAAA,MAAM,EAAE,CAHW;AAInBC,MAAAA,OAAO,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL;AAJU,KAAf,CAF8C;AAQpDC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AAR2C,GAAtD,EAYCC,IAZD,CAYMT,IAAI,IAAI;AACbH,IAAAA,GAAG,CAACC,MAAJ,CAAW,MAAX,EACEY,IADF,CACOP,IAAI,CAACC,SAAL,CAAeJ,IAAf,CADP,EAEED,IAFF,CAEO,GAFP,EAEY,GAFZ,EAGEA,IAHF,CAGO,GAHP,EAGY,GAHZ,EAIEA,IAJF,CAIO,WAJP,EAIoB,EAJpB,EAKEA,IALF,CAKO,aALP,EAKsB,WALtB;AAOA,GApBD;AAsBA,MAAIY,KAAK,GAAGzB,EAAE,CAACc,IAAH,CAAQ,mBAAR,EAA6B,UAASY,KAAT,EAAgBD,KAAhB,EAAuB;AAC9D,QAAIC,KAAJ,EAAW,MAAMA,KAAN;AAEX,QAAIC,YAAY,GAAGhB,GAAG,CAACC,MAAJ,CAAW,GAAX,EAChBC,IADgB,CACX,OADW,EACF,OADE,EAEhBe,SAFgB,CAEN,QAFM,EAGhBC,IAHgB,CAGXJ,KAAK,CAACK,KAHK,EAIhBC,KAJgB,GAIRnB,MAJQ,CAID,QAJC,EAKdC,IALc,CAKT,GALS,EAKJ,EALI,EAMdA,IANc,CAMT,MANS,EAMDL,YANC,CAAnB;AAOAwB,IAAAA,OAAO,CAACC,GAAR,CAAYR,KAAK,CAACK,KAAlB;AACD,GAXW,CAAZ;AAYAE,EAAAA,OAAO,CAACC,GAAR,CAAYR,KAAK,CAACK,KAAlB;AACD,CA7CD;;AA8CA,eAAe3B,WAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport * as d3 from 'd3';\n\nconst width = 600 //Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\nconst height = 500 //Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n\nconst DrawGrapho2 = (props) => {\n  useEffect(() => {\n   d3.select('.drawGrapho2 > *').remove();\n   draw(props)\n },[props])\n  return <div className=\"drawGrapho2\" />\n}\n\n\nconst draw = (props) => {\n\n  function getNodeColor(node) {\n    return node.group === 1 ? 'red' : 'gray'\n  }\n\n  var svg = d3.select(\".drawGrapho2\").append(\"svg\")\n  .attr(\"width\", width)\n  .attr(\"height\", height);\n\n  d3.json('https://jsonplaceholder.typicode.com/posts', {\n    method:\"POST\",\n    body: JSON.stringify({\n      title: 'Hello',\n      body: '_d3-fetch_ is it',\n      userId: 1,\n      friends: [2,3,4]\n    }),\n    headers: {\n      \"Content-type\": \"application/json; charset=UTF-8\"\n    }\n  })\n  .then(json => {\n   svg.append(\"text\")\n    .text(JSON.stringify(json))\n    .attr(\"y\", 200)\n    .attr(\"x\", 120)\n    .attr(\"font-size\", 16)\n    .attr(\"font-family\", \"monospace\")\n\n  });\n\n  var graph = d3.json(\"./miserables.json\", function(error, graph) {\n    if (error) throw error;\n\n    var nodeElements = svg.append(\"g\")\n      .attr(\"class\", \"nodes\")\n      .selectAll(\"circle\")\n      .data(graph.nodes)\n      .enter().append(\"circle\")\n        .attr(\"r\", 10)\n        .attr(\"fill\", getNodeColor)\n    console.log(graph.nodes)\n  });\n  console.log(graph.nodes)\n}\nexport default DrawGrapho2\n"]},"metadata":{},"sourceType":"module"}