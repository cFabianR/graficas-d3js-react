{"ast":null,"code":"var _jsxFileName = \"/home/fabian/Documents/d3Js/networks/network-react/chart-d3js-react/src/drawGrapho2.js\";\nimport React, { useEffect } from 'react';\nimport * as d3 from 'd3';\nconst width = 600; //Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n\nconst height = 500; //Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n\nconst DrawGrapho2 = props => {\n  useEffect(() => {\n    d3.select('.drawGrapho2 > *').remove();\n    draw(props);\n  }, [props]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"drawGrapho2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 10\n    }\n  });\n};\n\nconst draw = props => {\n  function isNeighborLink(node, link) {\n    return link.target.id === node.id || link.source.id === node.id;\n  }\n\n  function getNodeColor(node, neighbors) {\n    if (Array.isArray(neighbors) && neighbors.indexOf(node.id) > -1) {\n      return node.level === 1 ? 'blue' : '#e91e63';\n    }\n\n    return node.level === 1 ? 'red' : 'gray';\n  }\n\n  function getLinkColor(node, link) {\n    return isNeighborLink(node, link) ? '#e91e63' : '#E5E5E5';\n  }\n\n  function getTextColor(node, neighbors) {\n    return Array.isArray(neighbors) && neighbors.indexOf(node.id) > -1 ? '#e91e63' : 'gray';\n  }\n\n  var svg = d3.select(\".drawGrapho2\").append(\"svg\").attr(\"width\", width).attr(\"height\", height);\n  var linkElements, nodeElements, textElements; // we use svg groups to logically group the elements together\n\n  var linkGroup = svg.append('g').attr('class', 'links');\n  var nodeGroup = svg.append('g').attr('class', 'nodes');\n  var textGroup = svg.append('g').attr('class', 'texts');\n  var selectedId;\n  d3.json(\"https://raw.githubusercontent.com/cFabianR/Prubas/master/miserables.json\", {\n    crossOrigin: null\n  }).then(function (json) {\n    function getNeighbors(node) {\n      return json.links.reduce(function (neighbors, link) {\n        if (link.target.id === node.id) {\n          neighbors.push(link.source.id);\n        } else if (link.source.id === node.id) {\n          neighbors.push(link.target.id);\n        }\n\n        return neighbors;\n      }, [node.id]);\n    }\n\n    var linkForce = d3.forceLink().id(function (link) {\n      return link.id;\n    }).strength(function (link) {\n      return link.value / 100;\n    });\n    var simulation = d3.forceSimulation().force('link', linkForce).force('charge', d3.forceManyBody().strength(-20)).force('center', d3.forceCenter(width / 2, height / 2));\n    var dragDrop = d3.drag().on('start', function (node) {\n      node.fx = node.x;\n      node.fy = node.y;\n    }).on('drag', function (node) {\n      simulation.alphaTarget(0.7).restart();\n      node.fx = d3.event.x;\n      node.fy = d3.event.y;\n    }).on('end', function (node) {\n      if (!d3.event.active) {\n        simulation.alphaTarget(0);\n      }\n\n      node.fx = null;\n      node.fy = null;\n    }); // select node is called on every click\n    // we either update the data according to the selection\n    // or reset the data if the same node is clicked twice\n\n    function selectNode(selectedNode) {\n      if (selectedId === selectedNode.id) {\n        selectedId = undefined;\n        resetData();\n        updateSimulation();\n      } else {\n        selectedId = selectedNode.id;\n        updateData(selectedNode);\n        updateSimulation();\n      }\n\n      var neighbors = getNeighbors(selectedNode); // we modify the styles to highlight selected nodes\n\n      nodeElements.attr('fill', function (node) {\n        return getNodeColor(node, neighbors);\n      });\n      textElements.attr('fill', function (node) {\n        return getTextColor(node, neighbors);\n      });\n      linkElements.attr('stroke', function (link) {\n        return getLinkColor(selectedNode, link);\n      });\n    } // this helper simple adds all nodes and links\n    // that are missing, to recreate the initial state\n\n\n    function resetData() {\n      var nodeIds = json.nodes.map(function (node) {\n        return node.id;\n      });\n      json.nodes.forEach(function (node) {\n        if (nodeIds.indexOf(node.id) === -1) {\n          json.nodes.push(node);\n        }\n      });\n      json.links = json.links;\n    } // diffing and mutating the data\n\n\n    function updateData(selectedNode) {\n      var neighbors = getNeighbors(selectedNode);\n      var newNodes = json.nodes.filter(function (node) {\n        return neighbors.indexOf(node.id) > -1 || node.level === 1;\n      });\n      var diff = {\n        removed: json.nodes.filter(function (node) {\n          return newNodes.indexOf(node) === -1;\n        }),\n        added: newNodes.filter(function (node) {\n          return json.nodes.indexOf(node) === -1;\n        })\n      };\n      diff.removed.forEach(function (node) {\n        json.nodes.splice(json.nodes.indexOf(node), 1);\n      });\n      diff.added.forEach(function (node) {\n        json.nodes.push(node);\n      });\n      json.links = json.links.filter(function (link) {\n        return link.target.id === selectedNode.id || link.source.id === selectedNode.id;\n      });\n    }\n\n    function updateGraph() {\n      // links\n      linkElements = linkGroup.selectAll('line').data(json.links, function (link) {\n        return link.target.id + link.source.id;\n      });\n      linkElements.exit().remove();\n      var linkEnter = linkElements.enter().append('line').attr('stroke-width', 1).attr('stroke', 'rgba(50, 50, 50, 0.2)');\n      linkElements = linkEnter.merge(linkElements); // nodes\n\n      nodeElements = nodeGroup.selectAll('circle').data(json.nodes, function (node) {\n        return node.id;\n      });\n      nodeElements.exit().remove();\n      var nodeEnter = nodeElements.enter().append('circle').attr('r', 10).attr('fill', function (node) {\n        return node.level === 1 ? 'red' : 'gray';\n      }).call(dragDrop) // we link the selectNode method here\n      // to update the graph on every click\n      .on('click', selectNode);\n      nodeElements = nodeEnter.merge(nodeElements); // texts\n\n      textElements = textGroup.selectAll('text').data(json.nodes, function (node) {\n        return node.id;\n      });\n      textElements.exit().remove();\n      var textEnter = textElements.enter().append('text').text(function (node) {\n        return node.label;\n      }).attr('font-size', 15).attr('dx', 15).attr('dy', 4);\n      textElements = textEnter.merge(textElements);\n    }\n\n    function updateSimulation() {\n      updateGraph();\n      simulation.nodes(json.nodes).on('tick', () => {\n        nodeElements.attr('cx', function (node) {\n          return node.x;\n        }).attr('cy', function (node) {\n          return node.y;\n        });\n        textElements.attr('x', function (node) {\n          return node.x;\n        }).attr('y', function (node) {\n          return node.y;\n        });\n        linkElements.attr('x1', function (link) {\n          return link.source.x;\n        }).attr('y1', function (link) {\n          return link.source.y;\n        }).attr('x2', function (link) {\n          return link.target.x;\n        }).attr('y2', function (link) {\n          return link.target.y;\n        });\n      });\n      simulation.force('link').links(json.links);\n      simulation.alphaTarget(0.7).restart();\n    } // last but not least, we call updateSimulation\n    // to trigger the initial render\n\n\n    updateSimulation();\n    console.log(json);\n  });\n};\n\nexport default DrawGrapho2;","map":{"version":3,"sources":["/home/fabian/Documents/d3Js/networks/network-react/chart-d3js-react/src/drawGrapho2.js"],"names":["React","useEffect","d3","width","height","DrawGrapho2","props","select","remove","draw","isNeighborLink","node","link","target","id","source","getNodeColor","neighbors","Array","isArray","indexOf","level","getLinkColor","getTextColor","svg","append","attr","linkElements","nodeElements","textElements","linkGroup","nodeGroup","textGroup","selectedId","json","crossOrigin","then","getNeighbors","links","reduce","push","linkForce","forceLink","strength","value","simulation","forceSimulation","force","forceManyBody","forceCenter","dragDrop","drag","on","fx","x","fy","y","alphaTarget","restart","event","active","selectNode","selectedNode","undefined","resetData","updateSimulation","updateData","nodeIds","nodes","map","forEach","newNodes","filter","diff","removed","added","splice","updateGraph","selectAll","data","exit","linkEnter","enter","merge","nodeEnter","call","textEnter","text","label","console","log"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport * as d3 from 'd3';\n\nconst width = 600 //Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\nconst height = 500 //Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n\nconst DrawGrapho2 = (props) => {\n  useEffect(() => {\n   d3.select('.drawGrapho2 > *').remove();\n   draw(props)\n },[props])\n  return <div className=\"drawGrapho2\" />\n}\n\nconst draw = (props) => {\n\n\n\n  function isNeighborLink(node, link) {\n    return link.target.id === node.id || link.source.id === node.id\n  }\n\n\n  function getNodeColor(node, neighbors) {\n    if (Array.isArray(neighbors) && neighbors.indexOf(node.id) > -1) {\n      return node.level === 1 ? 'blue' : '#e91e63'\n    }\n\n    return node.level === 1 ? 'red' : 'gray'\n  }\n\n\n  function getLinkColor(node, link) {\n    return isNeighborLink(node, link) ? '#e91e63' : '#E5E5E5'\n  }\n\n  function getTextColor(node, neighbors) {\n    return Array.isArray(neighbors) && neighbors.indexOf(node.id) > -1 ? '#e91e63' : 'gray'\n  }\n\n  var svg = d3.select(\".drawGrapho2\").append(\"svg\")\n  .attr(\"width\", width)\n  .attr(\"height\", height);\n\n  var linkElements,\n    nodeElements,\n    textElements\n\n    // we use svg groups to logically group the elements together\n  var linkGroup = svg.append('g').attr('class', 'links')\n  var nodeGroup = svg.append('g').attr('class', 'nodes')\n  var textGroup = svg.append('g').attr('class', 'texts')\n\n  var selectedId\n\n  d3.json(\"https://raw.githubusercontent.com/cFabianR/Prubas/master/miserables.json\", {crossOrigin: null}).then(function(json) {\n\n    function getNeighbors(node) {\n      return json.links.reduce(function (neighbors, link) {\n          if (link.target.id === node.id) {\n            neighbors.push(link.source.id)\n          } else if (link.source.id === node.id) {\n            neighbors.push(link.target.id)\n          }\n          return neighbors\n        },\n        [node.id]\n      )\n    }\n\n    var linkForce = d3\n      .forceLink()\n      .id(function (link) { return link.id })\n      .strength(function (link) {return link.value/100})\n\n    var simulation = d3\n      .forceSimulation()\n      .force('link', linkForce)\n      .force('charge', d3.forceManyBody().strength(-20))\n      .force('center', d3.forceCenter(width / 2, height / 2))\n\n      var dragDrop = d3.drag().on('start', function (node) {\n        node.fx = node.x\n        node.fy = node.y\n      }).on('drag', function (node) {\n        simulation.alphaTarget(0.7).restart()\n        node.fx = d3.event.x\n        node.fy = d3.event.y\n      }).on('end', function (node) {\n        if (!d3.event.active) {\n          simulation.alphaTarget(0)\n        }\n        node.fx = null\n        node.fy = null\n      })\n\n    // select node is called on every click\n    // we either update the data according to the selection\n    // or reset the data if the same node is clicked twice\n    function selectNode(selectedNode) {\n      if (selectedId === selectedNode.id) {\n        selectedId = undefined\n        resetData()\n        updateSimulation()\n      } else {\n        selectedId = selectedNode.id\n        updateData(selectedNode)\n        updateSimulation()\n      }\n\n      var neighbors = getNeighbors(selectedNode)\n\n      // we modify the styles to highlight selected nodes\n      nodeElements.attr('fill', function (node) { return getNodeColor(node, neighbors) })\n      textElements.attr('fill', function (node) { return getTextColor(node, neighbors) })\n      linkElements.attr('stroke', function (link) { return getLinkColor(selectedNode, link) })\n    }\n\n    // this helper simple adds all nodes and links\n    // that are missing, to recreate the initial state\n    function resetData() {\n      var nodeIds = json.nodes.map(function (node) { return node.id })\n\n      json.nodes.forEach(function (node) {\n        if (nodeIds.indexOf(node.id) === -1) {\n          json.nodes.push(node)\n        }\n      })\n\n      json.links = json.links\n    }\n\n    // diffing and mutating the data\n    function updateData(selectedNode) {\n      var neighbors = getNeighbors(selectedNode)\n      var newNodes = json.nodes.filter(function (node) {\n        return neighbors.indexOf(node.id) > -1 || node.level === 1\n      })\n\n      var diff = {\n        removed: json.nodes.filter(function (node) { return newNodes.indexOf(node) === -1 }),\n        added: newNodes.filter(function (node) { return json.nodes.indexOf(node) === -1 })\n      }\n\n      diff.removed.forEach(function (node) { json.nodes.splice(json.nodes.indexOf(node), 1) })\n      diff.added.forEach(function (node) { json.nodes.push(node) })\n\n      json.links = json.links.filter(function (link) {\n        return link.target.id === selectedNode.id || link.source.id === selectedNode.id\n      })\n    }\n\n\n    function updateGraph() {\n      // links\n      linkElements = linkGroup.selectAll('line')\n        .data(json.links, function (link) {\n          return link.target.id + link.source.id\n        })\n\n      linkElements.exit().remove()\n\n      var linkEnter = linkElements\n        .enter().append('line')\n        .attr('stroke-width', 1)\n        .attr('stroke', 'rgba(50, 50, 50, 0.2)')\n\n      linkElements = linkEnter.merge(linkElements)\n\n      // nodes\n      nodeElements = nodeGroup.selectAll('circle')\n        .data(json.nodes, function (node) { return node.id })\n\n      nodeElements.exit().remove()\n\n      var nodeEnter = nodeElements\n        .enter()\n        .append('circle')\n        .attr('r', 10)\n        .attr('fill', function (node) { return node.level === 1 ? 'red' : 'gray' })\n        .call(dragDrop)\n        // we link the selectNode method here\n        // to update the graph on every click\n        .on('click', selectNode)\n\n      nodeElements = nodeEnter.merge(nodeElements)\n\n      // texts\n      textElements = textGroup.selectAll('text')\n        .data(json.nodes, function (node) { return node.id })\n\n      textElements.exit().remove()\n\n      var textEnter = textElements\n        .enter()\n        .append('text')\n        .text(function (node) { return node.label })\n        .attr('font-size', 15)\n        .attr('dx', 15)\n        .attr('dy', 4)\n\n      textElements = textEnter.merge(textElements)\n    }\n\n    function updateSimulation() {\n      updateGraph()\n\n      simulation.nodes(json.nodes).on('tick', () => {\n        nodeElements\n          .attr('cx', function (node) { return node.x })\n          .attr('cy', function (node) { return node.y })\n        textElements\n          .attr('x', function (node) { return node.x })\n          .attr('y', function (node) { return node.y })\n        linkElements\n          .attr('x1', function (link) { return link.source.x })\n          .attr('y1', function (link) { return link.source.y })\n          .attr('x2', function (link) { return link.target.x })\n          .attr('y2', function (link) { return link.target.y })\n      })\n\n      simulation.force('link').links(json.links)\n      simulation.alphaTarget(0.7).restart()\n    }\n\n    // last but not least, we call updateSimulation\n    // to trigger the initial render\n    updateSimulation()\n  console.log(json);\n  });\n\n\n\n}\nexport default DrawGrapho2\n"]},"metadata":{},"sourceType":"module"}