{"ast":null,"code":"var _jsxFileName = \"/home/fabian/Documents/d3Js/networks/network-react/chart-d3js-react/src/drawGrapho2.js\";\nimport React, { useEffect } from 'react';\nimport * as d3 from 'd3';\nconst width = 600; //Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n\nconst height = 500; //Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n\nconst DrawGrapho2 = props => {\n  useEffect(() => {\n    d3.select('.drawGrapho2 > *').remove();\n    draw(props);\n  }, [props]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"drawGrapho2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 10\n    }\n  });\n};\n\nconst draw = props => {\n  var svg = d3.select(\".drawGrapho2\").append(\"svg\").attr(\"width\", width).attr(\"height\", height);\n  var linkElements, nodeElements, textElements; // we use svg groups to logically group the elements together\n\n  var linkGroup = svg.append('g').attr('class', 'links');\n  var nodeGroup = svg.append('g').attr('class', 'nodes');\n  var textGroup = svg.append('g').attr('class', 'texts');\n  var selectedId;\n\n  function isNeighborLink(node, link) {\n    return link.target.id === node.id || link.source.id === node.id;\n  }\n\n  function getNodeColor(node, neighbors) {\n    console.log(selectedId);\n\n    if (Array.isArray(neighbors) && neighbors.indexOf(node.id) > -1) {\n      return selectedId === undefined ? 'DarkViolet' : 'DeepPink';\n    }\n\n    return 'DarkViolet';\n  }\n\n  function getLinkColor(node, link) {\n    if (selectedId == undefined) {\n      return 'Silver';\n    } else {\n      return isNeighborLink(node, link) ? 'DeepPink' : 'Silver';\n    }\n  }\n\n  function getTextColor(node, neighbors) {\n    return Array.isArray(neighbors) && neighbors.indexOf(node.id) > -1 ? 'DeepPink' : 'gray';\n  }\n\n  d3.json(\"https://raw.githubusercontent.com/cFabianR/Prubas/master/miserables.json\", {\n    crossOrigin: null\n  }).then(function (json) {\n    var nodes = [...json.nodes];\n    var links = [...json.links];\n    var linkForce = d3.forceLink().id(function (link) {\n      return link.id;\n    }).strength(function (link) {\n      return link.value / 100;\n    });\n    var simulation = d3.forceSimulation().force('link', linkForce).force('charge', d3.forceManyBody().strength(-20)).force('center', d3.forceCenter(width / 2, height / 2));\n    var dragDrop = d3.drag().on('start', function (node) {\n      node.fx = node.x;\n      node.fy = node.y;\n    }).on('drag', function (node) {\n      simulation.alphaTarget(0.7).restart();\n      node.fx = d3.event.x;\n      node.fy = d3.event.y;\n    }).on('end', function (node) {\n      if (!d3.event.active) {\n        simulation.alphaTarget(0);\n      }\n\n      node.fx = null;\n      node.fy = null;\n    });\n\n    function getNeighbors(node) {\n      return links.reduce(function (neighbors, link) {\n        if (link.target.id === node.id) {\n          neighbors.push(link.source.id);\n        } else if (link.source.id === node.id) {\n          neighbors.push(link.target.id);\n        }\n\n        return neighbors;\n      }, [node.id]);\n    } // select node is called on every click\n    // we either update the data according to the selection\n    // or reset the data if the same node is clicked twice\n\n\n    function selectNode(selectedNode) {\n      if (selectedId === selectedNode.id) {\n        selectedId = undefined;\n        resetData();\n        updateSimulation();\n      } else {\n        selectedId = selectedNode.id;\n        updateData(selectedNode);\n        updateSimulation();\n      }\n\n      var neighbors = getNeighbors(selectedNode); // we modify the styles to highlight selected nodes\n\n      nodeElements.attr('fill', function (node) {\n        return getNodeColor(node, neighbors);\n      });\n      textElements.attr('fill', function (node) {\n        return getTextColor(node, neighbors);\n      });\n      linkElements.attr('stroke', function (link) {\n        return getLinkColor(selectedNode, link);\n      });\n    } // this helper simple adds all nodes and links\n    // that are missing, to recreate the initial state\n\n\n    function resetData() {\n      var nodeIds = nodes.map(function (node) {\n        return node.id;\n      });\n      json.nodes.forEach(function (node) {\n        if (nodeIds.indexOf(node.id) === -1) {\n          nodes.push(node);\n        }\n      });\n      links = json.links;\n    } // diffing and mutating the data\n\n\n    function updateData(selectedNode) {\n      var neighbors = getNeighbors(selectedNode);\n      var newNodes = json.nodes.filter(function (node) {\n        return neighbors.indexOf(node.id) > -1 || node.level === 1;\n      });\n      var diff = {\n        removed: nodes.filter(function (node) {\n          return newNodes.indexOf(node) === -1;\n        }),\n        added: newNodes.filter(function (node) {\n          return nodes.indexOf(node) === -1;\n        })\n      };\n      diff.removed.forEach(function (node) {\n        nodes.splice(nodes.indexOf(node), 1);\n      });\n      diff.added.forEach(function (node) {\n        nodes.push(node);\n      });\n      links = json.links.filter(function (link) {\n        return link.target.id === selectedNode.id || link.source.id === selectedNode.id;\n      });\n    }\n\n    function updateGraph() {\n      // links\n      linkElements = linkGroup.selectAll('line').data(links, function (link) {\n        return link.target.id + link.source.id;\n      });\n      linkElements.exit().remove();\n      var linkEnter = linkElements.enter().append('line').attr('stroke-width', 1).attr('stroke', 'rgba(50, 50, 50, 0.2)');\n      linkElements = linkEnter.merge(linkElements); // nodes\n\n      nodeElements = nodeGroup.selectAll('circle').data(nodes, function (node) {\n        return node.id;\n      });\n      nodeElements.exit().remove();\n      var nodeEnter = nodeElements.enter().append('circle').attr('r', 10).attr('fill', \"DarkViolet\").call(dragDrop) // we link the selectNode method here\n      // to update the graph on every click\n      .on('click', selectNode);\n      nodeElements = nodeEnter.merge(nodeElements); // texts\n\n      textElements = textGroup.selectAll('text').data(nodes, function (node) {\n        return node.id;\n      });\n      textElements.exit().remove();\n      var textEnter = textElements.enter().append('text').text(function (node) {\n        return node.id;\n      }).attr('font-size', 15).attr('dx', 15).attr('dy', 4);\n      textElements = textEnter.merge(textElements);\n    }\n\n    function updateSimulation() {\n      updateGraph();\n      simulation.nodes(nodes).on('tick', () => {\n        nodeElements.attr('cx', function (node) {\n          return node.x;\n        }).attr('cy', function (node) {\n          return node.y;\n        });\n        textElements.attr('x', function (node) {\n          return node.x;\n        }).attr('y', function (node) {\n          return node.y;\n        });\n        linkElements.attr('x1', function (link) {\n          return link.source.x;\n        }).attr('y1', function (link) {\n          return link.source.y;\n        }).attr('x2', function (link) {\n          return link.target.x;\n        }).attr('y2', function (link) {\n          return link.target.y;\n        });\n      });\n      simulation.force('link').links(links);\n      simulation.alphaTarget(0.7).restart();\n    } // last but not least, we call updateSimulation\n    // to trigger the initial render\n\n\n    updateSimulation();\n    console.log(json);\n  });\n};\n\nexport default DrawGrapho2;","map":{"version":3,"sources":["/home/fabian/Documents/d3Js/networks/network-react/chart-d3js-react/src/drawGrapho2.js"],"names":["React","useEffect","d3","width","height","DrawGrapho2","props","select","remove","draw","svg","append","attr","linkElements","nodeElements","textElements","linkGroup","nodeGroup","textGroup","selectedId","isNeighborLink","node","link","target","id","source","getNodeColor","neighbors","console","log","Array","isArray","indexOf","undefined","getLinkColor","getTextColor","json","crossOrigin","then","nodes","links","linkForce","forceLink","strength","value","simulation","forceSimulation","force","forceManyBody","forceCenter","dragDrop","drag","on","fx","x","fy","y","alphaTarget","restart","event","active","getNeighbors","reduce","push","selectNode","selectedNode","resetData","updateSimulation","updateData","nodeIds","map","forEach","newNodes","filter","level","diff","removed","added","splice","updateGraph","selectAll","data","exit","linkEnter","enter","merge","nodeEnter","call","textEnter","text"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AAEA,MAAMC,KAAK,GAAG,GAAd,C,CAAkB;;AAClB,MAAMC,MAAM,GAAG,GAAf,C,CAAmB;;AAEnB,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAC7BL,EAAAA,SAAS,CAAC,MAAM;AACfC,IAAAA,EAAE,CAACK,MAAH,CAAU,kBAAV,EAA8BC,MAA9B;AACAC,IAAAA,IAAI,CAACH,KAAD,CAAJ;AACD,GAHS,EAGR,CAACA,KAAD,CAHQ,CAAT;AAIA,sBAAO;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CAND;;AAQA,MAAMG,IAAI,GAAIH,KAAD,IAAW;AAGtB,MAAII,GAAG,GAAGR,EAAE,CAACK,MAAH,CAAU,cAAV,EAA0BI,MAA1B,CAAiC,KAAjC,EACTC,IADS,CACJ,OADI,EACKT,KADL,EAETS,IAFS,CAEJ,QAFI,EAEMR,MAFN,CAAV;AAIA,MAAIS,YAAJ,EACEC,YADF,EAEEC,YAFF,CAPsB,CAWpB;;AACF,MAAIC,SAAS,GAAGN,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,OAArB,EAA8B,OAA9B,CAAhB;AACA,MAAIK,SAAS,GAAGP,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,OAArB,EAA8B,OAA9B,CAAhB;AACA,MAAIM,SAAS,GAAGR,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,OAArB,EAA8B,OAA9B,CAAhB;AAEA,MAAIO,UAAJ;;AAEA,WAASC,cAAT,CAAwBC,IAAxB,EAA8BC,IAA9B,EAAoC;AAClC,WAAOA,IAAI,CAACC,MAAL,CAAYC,EAAZ,KAAmBH,IAAI,CAACG,EAAxB,IAA8BF,IAAI,CAACG,MAAL,CAAYD,EAAZ,KAAmBH,IAAI,CAACG,EAA7D;AACD;;AAED,WAASE,YAAT,CAAsBL,IAAtB,EAA4BM,SAA5B,EAAuC;AACrCC,IAAAA,OAAO,CAACC,GAAR,CAAYV,UAAZ;;AACA,QAAIW,KAAK,CAACC,OAAN,CAAcJ,SAAd,KAA4BA,SAAS,CAACK,OAAV,CAAkBX,IAAI,CAACG,EAAvB,IAA6B,CAAC,CAA9D,EAAiE;AAC/D,aAAOL,UAAU,KAAKc,SAAf,GAA4B,YAA5B,GAA2C,UAAlD;AACD;;AACF,WAAO,YAAP;AACA;;AAED,WAASC,YAAT,CAAsBb,IAAtB,EAA4BC,IAA5B,EAAkC;AAChC,QAAIH,UAAU,IAAIc,SAAlB,EAA4B;AAC1B,aAAO,QAAP;AACD,KAFD,MAEO;AACL,aAAOb,cAAc,CAACC,IAAD,EAAOC,IAAP,CAAd,GAA6B,UAA7B,GAA0C,QAAjD;AACD;AAEF;;AAED,WAASa,YAAT,CAAsBd,IAAtB,EAA4BM,SAA5B,EAAuC;AACrC,WAAOG,KAAK,CAACC,OAAN,CAAcJ,SAAd,KAA4BA,SAAS,CAACK,OAAV,CAAkBX,IAAI,CAACG,EAAvB,IAA6B,CAAC,CAA1D,GAA8D,UAA9D,GAA2E,MAAlF;AACD;;AACDtB,EAAAA,EAAE,CAACkC,IAAH,CAAQ,0EAAR,EAAoF;AAACC,IAAAA,WAAW,EAAE;AAAd,GAApF,EAAyGC,IAAzG,CAA8G,UAASF,IAAT,EAAe;AAE3H,QAAIG,KAAK,GAAG,CAAC,GAAGH,IAAI,CAACG,KAAT,CAAZ;AACA,QAAIC,KAAK,GAAG,CAAC,GAAGJ,IAAI,CAACI,KAAT,CAAZ;AAEA,QAAIC,SAAS,GAAGvC,EAAE,CACfwC,SADa,GAEblB,EAFa,CAEV,UAAUF,IAAV,EAAgB;AAAE,aAAOA,IAAI,CAACE,EAAZ;AAAgB,KAFxB,EAGbmB,QAHa,CAGJ,UAAUrB,IAAV,EAAgB;AAAC,aAAOA,IAAI,CAACsB,KAAL,GAAW,GAAlB;AAAsB,KAHnC,CAAhB;AAKA,QAAIC,UAAU,GAAG3C,EAAE,CAChB4C,eADc,GAEdC,KAFc,CAER,MAFQ,EAEAN,SAFA,EAGdM,KAHc,CAGR,QAHQ,EAGE7C,EAAE,CAAC8C,aAAH,GAAmBL,QAAnB,CAA4B,CAAC,EAA7B,CAHF,EAIdI,KAJc,CAIR,QAJQ,EAIE7C,EAAE,CAAC+C,WAAH,CAAe9C,KAAK,GAAG,CAAvB,EAA0BC,MAAM,GAAG,CAAnC,CAJF,CAAjB;AAMA,QAAI8C,QAAQ,GAAGhD,EAAE,CAACiD,IAAH,GAAUC,EAAV,CAAa,OAAb,EAAsB,UAAU/B,IAAV,EAAgB;AAClDA,MAAAA,IAAI,CAACgC,EAAL,GAAUhC,IAAI,CAACiC,CAAf;AACAjC,MAAAA,IAAI,CAACkC,EAAL,GAAUlC,IAAI,CAACmC,CAAf;AACC,KAHW,EAIZJ,EAJY,CAIT,MAJS,EAID,UAAU/B,IAAV,EAAgB;AAC1BwB,MAAAA,UAAU,CAACY,WAAX,CAAuB,GAAvB,EAA4BC,OAA5B;AACArC,MAAAA,IAAI,CAACgC,EAAL,GAAUnD,EAAE,CAACyD,KAAH,CAASL,CAAnB;AACAjC,MAAAA,IAAI,CAACkC,EAAL,GAAUrD,EAAE,CAACyD,KAAH,CAASH,CAAnB;AACD,KARY,EASZJ,EATY,CAST,KATS,EASF,UAAU/B,IAAV,EAAgB;AACzB,UAAI,CAACnB,EAAE,CAACyD,KAAH,CAASC,MAAd,EAAsB;AACpBf,QAAAA,UAAU,CAACY,WAAX,CAAuB,CAAvB;AACD;;AACDpC,MAAAA,IAAI,CAACgC,EAAL,GAAU,IAAV;AACAhC,MAAAA,IAAI,CAACkC,EAAL,GAAU,IAAV;AACD,KAfY,CAAf;;AAiBA,aAASM,YAAT,CAAsBxC,IAAtB,EAA4B;AAC1B,aAAOmB,KAAK,CAACsB,MAAN,CAAa,UAAUnC,SAAV,EAAqBL,IAArB,EAA2B;AAC3C,YAAIA,IAAI,CAACC,MAAL,CAAYC,EAAZ,KAAmBH,IAAI,CAACG,EAA5B,EAAgC;AAC9BG,UAAAA,SAAS,CAACoC,IAAV,CAAezC,IAAI,CAACG,MAAL,CAAYD,EAA3B;AACD,SAFD,MAEO,IAAIF,IAAI,CAACG,MAAL,CAAYD,EAAZ,KAAmBH,IAAI,CAACG,EAA5B,EAAgC;AACrCG,UAAAA,SAAS,CAACoC,IAAV,CAAezC,IAAI,CAACC,MAAL,CAAYC,EAA3B;AACD;;AACD,eAAOG,SAAP;AACD,OAPI,EAQL,CAACN,IAAI,CAACG,EAAN,CARK,CAAP;AAUD,KA5C0H,CA8C3H;AACA;AACA;;;AACA,aAASwC,UAAT,CAAoBC,YAApB,EAAkC;AAChC,UAAI9C,UAAU,KAAK8C,YAAY,CAACzC,EAAhC,EAAoC;AAClCL,QAAAA,UAAU,GAAGc,SAAb;AACAiC,QAAAA,SAAS;AACTC,QAAAA,gBAAgB;AACjB,OAJD,MAIO;AACLhD,QAAAA,UAAU,GAAG8C,YAAY,CAACzC,EAA1B;AACA4C,QAAAA,UAAU,CAACH,YAAD,CAAV;AACAE,QAAAA,gBAAgB;AACjB;;AAED,UAAIxC,SAAS,GAAGkC,YAAY,CAACI,YAAD,CAA5B,CAXgC,CAahC;;AACAnD,MAAAA,YAAY,CAACF,IAAb,CAAkB,MAAlB,EAA0B,UAAUS,IAAV,EAAgB;AAAE,eAAOK,YAAY,CAACL,IAAD,EAAOM,SAAP,CAAnB;AAAsC,OAAlF;AACAZ,MAAAA,YAAY,CAACH,IAAb,CAAkB,MAAlB,EAA0B,UAAUS,IAAV,EAAgB;AAAE,eAAOc,YAAY,CAACd,IAAD,EAAOM,SAAP,CAAnB;AAAsC,OAAlF;AACAd,MAAAA,YAAY,CAACD,IAAb,CAAkB,QAAlB,EAA4B,UAAUU,IAAV,EAAgB;AAAE,eAAOY,YAAY,CAAC+B,YAAD,EAAe3C,IAAf,CAAnB;AAAyC,OAAvF;AACD,KAlE0H,CAoE3H;AACA;;;AACA,aAAS4C,SAAT,GAAqB;AACnB,UAAIG,OAAO,GAAG9B,KAAK,CAAC+B,GAAN,CAAU,UAAUjD,IAAV,EAAgB;AAAE,eAAOA,IAAI,CAACG,EAAZ;AAAgB,OAA5C,CAAd;AAEAY,MAAAA,IAAI,CAACG,KAAL,CAAWgC,OAAX,CAAmB,UAAUlD,IAAV,EAAgB;AACjC,YAAIgD,OAAO,CAACrC,OAAR,CAAgBX,IAAI,CAACG,EAArB,MAA6B,CAAC,CAAlC,EAAqC;AACnCe,UAAAA,KAAK,CAACwB,IAAN,CAAW1C,IAAX;AACD;AACF,OAJD;AAMAmB,MAAAA,KAAK,GAAGJ,IAAI,CAACI,KAAb;AACD,KAhF0H,CAkF3H;;;AACA,aAAS4B,UAAT,CAAoBH,YAApB,EAAkC;AAChC,UAAItC,SAAS,GAAGkC,YAAY,CAACI,YAAD,CAA5B;AACA,UAAIO,QAAQ,GAAGpC,IAAI,CAACG,KAAL,CAAWkC,MAAX,CAAkB,UAAUpD,IAAV,EAAgB;AAC/C,eAAOM,SAAS,CAACK,OAAV,CAAkBX,IAAI,CAACG,EAAvB,IAA6B,CAAC,CAA9B,IAAmCH,IAAI,CAACqD,KAAL,KAAe,CAAzD;AACD,OAFc,CAAf;AAIA,UAAIC,IAAI,GAAG;AACTC,QAAAA,OAAO,EAAErC,KAAK,CAACkC,MAAN,CAAa,UAAUpD,IAAV,EAAgB;AAAE,iBAAOmD,QAAQ,CAACxC,OAAT,CAAiBX,IAAjB,MAA2B,CAAC,CAAnC;AAAsC,SAArE,CADA;AAETwD,QAAAA,KAAK,EAAEL,QAAQ,CAACC,MAAT,CAAgB,UAAUpD,IAAV,EAAgB;AAAE,iBAAOkB,KAAK,CAACP,OAAN,CAAcX,IAAd,MAAwB,CAAC,CAAhC;AAAmC,SAArE;AAFE,OAAX;AAKAsD,MAAAA,IAAI,CAACC,OAAL,CAAaL,OAAb,CAAqB,UAAUlD,IAAV,EAAgB;AAAEkB,QAAAA,KAAK,CAACuC,MAAN,CAAavC,KAAK,CAACP,OAAN,CAAcX,IAAd,CAAb,EAAkC,CAAlC;AAAsC,OAA7E;AACAsD,MAAAA,IAAI,CAACE,KAAL,CAAWN,OAAX,CAAmB,UAAUlD,IAAV,EAAgB;AAAEkB,QAAAA,KAAK,CAACwB,IAAN,CAAW1C,IAAX;AAAkB,OAAvD;AAEAmB,MAAAA,KAAK,GAAGJ,IAAI,CAACI,KAAL,CAAWiC,MAAX,CAAkB,UAAUnD,IAAV,EAAgB;AACxC,eAAOA,IAAI,CAACC,MAAL,CAAYC,EAAZ,KAAmByC,YAAY,CAACzC,EAAhC,IAAsCF,IAAI,CAACG,MAAL,CAAYD,EAAZ,KAAmByC,YAAY,CAACzC,EAA7E;AACD,OAFO,CAAR;AAGD;;AAED,aAASuD,WAAT,GAAuB;AACrB;AACAlE,MAAAA,YAAY,GAAGG,SAAS,CAACgE,SAAV,CAAoB,MAApB,EACZC,IADY,CACPzC,KADO,EACA,UAAUlB,IAAV,EAAgB;AAC3B,eAAOA,IAAI,CAACC,MAAL,CAAYC,EAAZ,GAAiBF,IAAI,CAACG,MAAL,CAAYD,EAApC;AACD,OAHY,CAAf;AAKAX,MAAAA,YAAY,CAACqE,IAAb,GAAoB1E,MAApB;AAEA,UAAI2E,SAAS,GAAGtE,YAAY,CACzBuE,KADa,GACLzE,MADK,CACE,MADF,EAEbC,IAFa,CAER,cAFQ,EAEQ,CAFR,EAGbA,IAHa,CAGR,QAHQ,EAGE,uBAHF,CAAhB;AAKAC,MAAAA,YAAY,GAAGsE,SAAS,CAACE,KAAV,CAAgBxE,YAAhB,CAAf,CAdqB,CAgBrB;;AACAC,MAAAA,YAAY,GAAGG,SAAS,CAAC+D,SAAV,CAAoB,QAApB,EACZC,IADY,CACP1C,KADO,EACA,UAAUlB,IAAV,EAAgB;AAAE,eAAOA,IAAI,CAACG,EAAZ;AAAgB,OADlC,CAAf;AAGAV,MAAAA,YAAY,CAACoE,IAAb,GAAoB1E,MAApB;AAEA,UAAI8E,SAAS,GAAGxE,YAAY,CACzBsE,KADa,GAEbzE,MAFa,CAEN,QAFM,EAGbC,IAHa,CAGR,GAHQ,EAGH,EAHG,EAIbA,IAJa,CAIR,MAJQ,EAIC,YAJD,EAKb2E,IALa,CAKRrC,QALQ,EAMd;AACA;AAPc,OAQbE,EARa,CAQV,OARU,EAQDY,UARC,CAAhB;AAUAlD,MAAAA,YAAY,GAAGwE,SAAS,CAACD,KAAV,CAAgBvE,YAAhB,CAAf,CAhCqB,CAkCrB;;AACAC,MAAAA,YAAY,GAAGG,SAAS,CAAC8D,SAAV,CAAoB,MAApB,EACZC,IADY,CACP1C,KADO,EACA,UAAUlB,IAAV,EAAgB;AAAE,eAAOA,IAAI,CAACG,EAAZ;AAAgB,OADlC,CAAf;AAGAT,MAAAA,YAAY,CAACmE,IAAb,GAAoB1E,MAApB;AAEA,UAAIgF,SAAS,GAAGzE,YAAY,CACzBqE,KADa,GAEbzE,MAFa,CAEN,MAFM,EAGb8E,IAHa,CAGR,UAAUpE,IAAV,EAAgB;AAAE,eAAOA,IAAI,CAACG,EAAZ;AAAe,OAHzB,EAIbZ,IAJa,CAIR,WAJQ,EAIK,EAJL,EAKbA,IALa,CAKR,IALQ,EAKF,EALE,EAMbA,IANa,CAMR,IANQ,EAMF,CANE,CAAhB;AAQAG,MAAAA,YAAY,GAAGyE,SAAS,CAACH,KAAV,CAAgBtE,YAAhB,CAAf;AACD;;AAED,aAASoD,gBAAT,GAA4B;AAC1BY,MAAAA,WAAW;AAEXlC,MAAAA,UAAU,CAACN,KAAX,CAAiBA,KAAjB,EAAwBa,EAAxB,CAA2B,MAA3B,EAAmC,MAAM;AACvCtC,QAAAA,YAAY,CACTF,IADH,CACQ,IADR,EACc,UAAUS,IAAV,EAAgB;AAAE,iBAAOA,IAAI,CAACiC,CAAZ;AAAe,SAD/C,EAEG1C,IAFH,CAEQ,IAFR,EAEc,UAAUS,IAAV,EAAgB;AAAE,iBAAOA,IAAI,CAACmC,CAAZ;AAAe,SAF/C;AAGAzC,QAAAA,YAAY,CACTH,IADH,CACQ,GADR,EACa,UAAUS,IAAV,EAAgB;AAAE,iBAAOA,IAAI,CAACiC,CAAZ;AAAe,SAD9C,EAEG1C,IAFH,CAEQ,GAFR,EAEa,UAAUS,IAAV,EAAgB;AAAE,iBAAOA,IAAI,CAACmC,CAAZ;AAAe,SAF9C;AAGA3C,QAAAA,YAAY,CACTD,IADH,CACQ,IADR,EACc,UAAUU,IAAV,EAAgB;AAAE,iBAAOA,IAAI,CAACG,MAAL,CAAY6B,CAAnB;AAAsB,SADtD,EAEG1C,IAFH,CAEQ,IAFR,EAEc,UAAUU,IAAV,EAAgB;AAAE,iBAAOA,IAAI,CAACG,MAAL,CAAY+B,CAAnB;AAAsB,SAFtD,EAGG5C,IAHH,CAGQ,IAHR,EAGc,UAAUU,IAAV,EAAgB;AAAE,iBAAOA,IAAI,CAACC,MAAL,CAAY+B,CAAnB;AAAsB,SAHtD,EAIG1C,IAJH,CAIQ,IAJR,EAIc,UAAUU,IAAV,EAAgB;AAAE,iBAAOA,IAAI,CAACC,MAAL,CAAYiC,CAAnB;AAAsB,SAJtD;AAKD,OAZD;AAcAX,MAAAA,UAAU,CAACE,KAAX,CAAiB,MAAjB,EAAyBP,KAAzB,CAA+BA,KAA/B;AACAK,MAAAA,UAAU,CAACY,WAAX,CAAuB,GAAvB,EAA4BC,OAA5B;AACD,KA5K0H,CA8K3H;AACA;;;AACAS,IAAAA,gBAAgB;AAClBvC,IAAAA,OAAO,CAACC,GAAR,CAAYO,IAAZ;AACC,GAlLD;AAmLD,CA7ND;;AA8NA,eAAe/B,WAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport * as d3 from 'd3';\n\nconst width = 600 //Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\nconst height = 500 //Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n\nconst DrawGrapho2 = (props) => {\n  useEffect(() => {\n   d3.select('.drawGrapho2 > *').remove();\n   draw(props)\n },[props])\n  return <div className=\"drawGrapho2\" />\n}\n\nconst draw = (props) => {\n\n\n  var svg = d3.select(\".drawGrapho2\").append(\"svg\")\n  .attr(\"width\", width)\n  .attr(\"height\", height);\n\n  var linkElements,\n    nodeElements,\n    textElements\n\n    // we use svg groups to logically group the elements together\n  var linkGroup = svg.append('g').attr('class', 'links')\n  var nodeGroup = svg.append('g').attr('class', 'nodes')\n  var textGroup = svg.append('g').attr('class', 'texts')\n\n  var selectedId\n\n  function isNeighborLink(node, link) {\n    return link.target.id === node.id || link.source.id === node.id\n  }\n\n  function getNodeColor(node, neighbors) {\n    console.log(selectedId);\n    if (Array.isArray(neighbors) && neighbors.indexOf(node.id) > -1) {\n      return selectedId === undefined  ? 'DarkViolet' : 'DeepPink'\n    }\n   return 'DarkViolet'\n  }\n\n  function getLinkColor(node, link) {\n    if (selectedId == undefined){\n      return 'Silver'\n    } else {\n      return isNeighborLink(node, link) ? 'DeepPink' : 'Silver'\n    }\n\n  }\n\n  function getTextColor(node, neighbors) {\n    return Array.isArray(neighbors) && neighbors.indexOf(node.id) > -1 ? 'DeepPink' : 'gray'\n  }\n  d3.json(\"https://raw.githubusercontent.com/cFabianR/Prubas/master/miserables.json\", {crossOrigin: null}).then(function(json) {\n\n    var nodes = [...json.nodes]\n    var links = [...json.links]\n\n    var linkForce = d3\n      .forceLink()\n      .id(function (link) { return link.id })\n      .strength(function (link) {return link.value/100})\n\n    var simulation = d3\n      .forceSimulation()\n      .force('link', linkForce)\n      .force('charge', d3.forceManyBody().strength(-20))\n      .force('center', d3.forceCenter(width / 2, height / 2))\n\n    var dragDrop = d3.drag().on('start', function (node) {\n       node.fx = node.x\n       node.fy = node.y\n       })\n      .on('drag', function (node) {\n        simulation.alphaTarget(0.7).restart()\n        node.fx = d3.event.x\n        node.fy = d3.event.y\n      })\n      .on('end', function (node) {\n        if (!d3.event.active) {\n          simulation.alphaTarget(0)\n        }\n        node.fx = null\n        node.fy = null\n      })\n\n    function getNeighbors(node) {\n      return links.reduce(function (neighbors, link) {\n          if (link.target.id === node.id) {\n            neighbors.push(link.source.id)\n          } else if (link.source.id === node.id) {\n            neighbors.push(link.target.id)\n          }\n          return neighbors\n        },\n        [node.id]\n      )\n    }\n\n    // select node is called on every click\n    // we either update the data according to the selection\n    // or reset the data if the same node is clicked twice\n    function selectNode(selectedNode) {\n      if (selectedId === selectedNode.id) {\n        selectedId = undefined\n        resetData()\n        updateSimulation()\n      } else {\n        selectedId = selectedNode.id\n        updateData(selectedNode)\n        updateSimulation()\n      }\n\n      var neighbors = getNeighbors(selectedNode)\n\n      // we modify the styles to highlight selected nodes\n      nodeElements.attr('fill', function (node) { return getNodeColor(node, neighbors) })\n      textElements.attr('fill', function (node) { return getTextColor(node, neighbors) })\n      linkElements.attr('stroke', function (link) { return getLinkColor(selectedNode, link) })\n    }\n\n    // this helper simple adds all nodes and links\n    // that are missing, to recreate the initial state\n    function resetData() {\n      var nodeIds = nodes.map(function (node) { return node.id })\n\n      json.nodes.forEach(function (node) {\n        if (nodeIds.indexOf(node.id) === -1) {\n          nodes.push(node)\n        }\n      })\n\n      links = json.links\n    }\n\n    // diffing and mutating the data\n    function updateData(selectedNode) {\n      var neighbors = getNeighbors(selectedNode)\n      var newNodes = json.nodes.filter(function (node) {\n        return neighbors.indexOf(node.id) > -1 || node.level === 1\n      })\n\n      var diff = {\n        removed: nodes.filter(function (node) { return newNodes.indexOf(node) === -1 }),\n        added: newNodes.filter(function (node) { return nodes.indexOf(node) === -1 })\n      }\n\n      diff.removed.forEach(function (node) { nodes.splice(nodes.indexOf(node), 1) })\n      diff.added.forEach(function (node) { nodes.push(node) })\n\n      links = json.links.filter(function (link) {\n        return link.target.id === selectedNode.id || link.source.id === selectedNode.id\n      })\n    }\n\n    function updateGraph() {\n      // links\n      linkElements = linkGroup.selectAll('line')\n        .data(links, function (link) {\n          return link.target.id + link.source.id\n        })\n\n      linkElements.exit().remove()\n\n      var linkEnter = linkElements\n        .enter().append('line')\n        .attr('stroke-width', 1)\n        .attr('stroke', 'rgba(50, 50, 50, 0.2)')\n\n      linkElements = linkEnter.merge(linkElements)\n\n      // nodes\n      nodeElements = nodeGroup.selectAll('circle')\n        .data(nodes, function (node) { return node.id })\n\n      nodeElements.exit().remove()\n\n      var nodeEnter = nodeElements\n        .enter()\n        .append('circle')\n        .attr('r', 10)\n        .attr('fill',  \"DarkViolet\" )\n        .call(dragDrop)\n        // we link the selectNode method here\n        // to update the graph on every click\n        .on('click', selectNode)\n\n      nodeElements = nodeEnter.merge(nodeElements)\n\n      // texts\n      textElements = textGroup.selectAll('text')\n        .data(nodes, function (node) { return node.id })\n\n      textElements.exit().remove()\n\n      var textEnter = textElements\n        .enter()\n        .append('text')\n        .text(function (node) { return node.id})\n        .attr('font-size', 15)\n        .attr('dx', 15)\n        .attr('dy', 4)\n\n      textElements = textEnter.merge(textElements)\n    }\n\n    function updateSimulation() {\n      updateGraph()\n\n      simulation.nodes(nodes).on('tick', () => {\n        nodeElements\n          .attr('cx', function (node) { return node.x })\n          .attr('cy', function (node) { return node.y })\n        textElements\n          .attr('x', function (node) { return node.x })\n          .attr('y', function (node) { return node.y })\n        linkElements\n          .attr('x1', function (link) { return link.source.x })\n          .attr('y1', function (link) { return link.source.y })\n          .attr('x2', function (link) { return link.target.x })\n          .attr('y2', function (link) { return link.target.y })\n      })\n\n      simulation.force('link').links(links)\n      simulation.alphaTarget(0.7).restart()\n    }\n\n    // last but not least, we call updateSimulation\n    // to trigger the initial render\n    updateSimulation()\n  console.log(json);\n  });\n}\nexport default DrawGrapho2\n"]},"metadata":{},"sourceType":"module"}